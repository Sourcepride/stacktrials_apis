"""initial migration

Revision ID: d5059fb93c7c
Revises:
Create Date: 2025-08-21 06:36:04.045449

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "d5059fb93c7c"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "account",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("username", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )

    op.create_index(op.f("ix_account_email"), "account", ["email"], unique=True)
    op.create_index(op.f("ix_account_username"), "account", ["username"], unique=True)

    # Profile
    op.create_table(
        "profile",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("display_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("bio", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("avatar", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("account_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["account_id"], ["account.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )

    # PROVIDER
    op.create_table(
        "provider",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column(
            "provider",
            sa.Enum("GOOGLE", "GITHUB", "DROP_BOX", name="providers"),
            nullable=False,
        ),
        sa.Column("provider_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("scopes", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("expires_at", sa.DateTime(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("access_token", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("refresh_token", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("account_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["account_id"], ["account.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_provider_account_id"), "provider", ["account_id"], unique=False
    )

    # COURSE
    op.create_table(
        "course",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column(
            "title", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False
        ),
        sa.Column("slug", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "short_description", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "learning_objectives",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "prerequisites", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "difficulty_level",
            sa.Enum(
                "BEGINNER", "INTERMEDIATE", "ADVANCED", "EXPERT", name="difficultylevel"
            ),
            nullable=False,
        ),
        sa.Column("estimated_duration_hours", sa.Integer(), nullable=True),
        sa.Column(
            "language", sqlmodel.sql.sqltypes.AutoString(length=10), nullable=False
        ),
        sa.Column(
            "status",
            sa.Enum("DRAFT", "PUBLISHED", "ARCHIVED", name="coursestatus"),
            nullable=False,
        ),
        sa.Column(
            "enrollment_type",
            sa.Enum("OPEN", "RESTRICTED", "INVITATION_ONLY", name="enrollmenttype"),
            nullable=False,
        ),
        sa.Column(
            "visibility",
            sa.Enum("PUBLIC", "PRIVATE", name="visibilitytype"),
            nullable=False,
        ),
        sa.Column("certification_enabled", sa.Boolean(), nullable=False),
        sa.Column("average_rating", sa.Float(), nullable=False),
        sa.Column("total_rating", sa.Integer(), nullable=False),
        sa.Column("stars", sa.Integer(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("account_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(["account_id"], ["account.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_course_difficulty_level"), "course", ["difficulty_level"], unique=False
    )
    op.create_index(op.f("ix_course_slug"), "course", ["slug"], unique=True)
    op.create_index(op.f("ix_course_status"), "course", ["status"], unique=False)
    op.create_index(op.f("ix_course_title"), "course", ["title"], unique=False)
    op.create_index(
        "ix_search_filter",
        "course",
        ["title", "status", "visibility", "enrollment_type"],
        unique=False,
    )

    # SECTION
    op.create_table(
        "section",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column(
            "title", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False
        ),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "learning_objectives",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column("order_index", sa.Integer(), nullable=False),
        sa.Column("estimated_duration_minutes", sa.Integer(), nullable=True),
        sa.Column("is_optional", sa.Boolean(), nullable=False),
        sa.Column(
            "progression_type",
            sa.Enum("SEQUENTIAL", "FLEXIBLE", name="progressiontype"),
            nullable=False,
        ),
        sa.Column(
            "completion_criteria",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("course_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["course_id"], ["course.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("course_id", "order_index", name="uq_course_order"),
    )
    op.create_index(
        "ix_course_order", "section", ["course_id", "order_index"], unique=False
    )
    op.create_index(
        op.f("ix_section_course_id"), "section", ["course_id"], unique=False
    )
    op.create_index(
        op.f("ix_section_order_index"), "section", ["order_index"], unique=False
    )

    # MODULE
    op.create_table(
        "module",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column(
            "title", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False
        ),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "module_type",
            sa.Enum(
                "VIDEO",
                "DOCUMENT",
                "QUIZ",
                "ASSIGNMENT",
                "DISCUSSION",
                "EXTERNAL_LINK",
                "SIMULATION",
                name="moduletype",
            ),
            nullable=False,
        ),
        sa.Column(
            "content_data", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("order_index", sa.Integer(), nullable=False),
        sa.Column("estimated_duration_minutes", sa.Integer(), nullable=True),
        sa.Column("is_required", sa.Boolean(), nullable=False),
        sa.Column(
            "prerequisites", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("settings", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("section_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["section_id"], ["section.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("section_id", "order_index", name="uq_section_order"),
    )
    op.create_index(
        op.f("ix_module_module_type"), "module", ["module_type"], unique=False
    )
    op.create_index(
        op.f("ix_module_order_index"), "module", ["order_index"], unique=False
    )
    op.create_index(
        op.f("ix_module_section_id"), "module", ["section_id"], unique=False
    )
    op.create_index(
        "ix_section_order", "module", ["section_id", "order_index"], unique=False
    )

    # MODULE ATTACHMENT
    op.create_table(
        "module_attachment",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column(
            "attachment_type",
            sa.Enum("DOCUMENT", "EXTERNAL_LINK", name="attachmenttype"),
            nullable=False,
        ),
        sa.Column(
            "file_url", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False
        ),
        sa.Column(
            "external_file_id",
            sqlmodel.sql.sqltypes.AutoString(length=255),
            nullable=True,
        ),
        sa.Column(
            "embed_url", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True
        ),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("module_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["module_id"], ["module.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_module_attachment_external_file_id"),
        "module_attachment",
        ["external_file_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_module_attachment_module_id"),
        "module_attachment",
        ["module_id"],
        unique=False,
    )

    # VIDEO CONTENT

    op.create_table(
        "video_content",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column(
            "platform",
            sa.Enum(
                "YOUTUBE",
                "DAILYMOTION",
                "DROP_BOX",
                "GOOGLE_DRIVE",
                name="videoplatform",
            ),
            nullable=False,
        ),
        sa.Column(
            "external_video_id",
            sqlmodel.sql.sqltypes.AutoString(length=255),
            nullable=False,
        ),
        sa.Column(
            "video_url", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False
        ),
        sa.Column(
            "thumbnail_url", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True
        ),
        sa.Column("duration_seconds", sa.Integer(), nullable=True),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "embed_settings", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("module_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["module_id"], ["module.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("module_id"),
    )
    op.create_index(
        op.f("ix_video_content_external_video_id"),
        "video_content",
        ["external_video_id"],
        unique=False,
    )

    # DOCUMENT CONTENT
    op.create_table(
        "document_content",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column(
            "platform",
            sa.Enum(
                "GOOGLE_DRIVE",
                "DROPBOX",
                "ONEDRIVE",
                "DIRECT_LINK",
                name="documentplatform",
            ),
            nullable=False,
        ),
        sa.Column(
            "external_file_id",
            sqlmodel.sql.sqltypes.AutoString(length=255),
            nullable=True,
        ),
        sa.Column(
            "file_url", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False
        ),
        sa.Column(
            "embed_url", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True
        ),
        sa.Column(
            "file_name", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False
        ),
        sa.Column(
            "file_type", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False
        ),
        sa.Column("file_size_bytes", sa.Integer(), nullable=True),
        sa.Column(
            "viewer_settings", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("module_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["module_id"], ["module.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("module_id"),
    )
    op.create_index(
        op.f("ix_document_content_external_file_id"),
        "document_content",
        ["external_file_id"],
        unique=False,
    )

    # QUIZ CONTENT
    op.create_table(
        "quiz_content",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column(
            "quiz_settings", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("passing_score", sa.Float(), nullable=True),
        sa.Column(
            "show_results",
            sa.Enum(
                "IMMEDIATE", "AFTER_SUBMISSION", "AFTER_DUE_DATE", name="showresults"
            ),
            nullable=False,
        ),
        sa.Column("randomize_questions", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("module_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["module_id"], ["module.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("module_id"),
    )

    # QUIZ QUESTION
    op.create_table(
        "quiz_question",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("question_text", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "question_type",
            sa.Enum(
                "MULTIPLE_CHOICE",
                "TRUE_FALSE",
                "SHORT_ANSWER",
                "ESSAY",
                "MATCHING",
                name="questiontype",
            ),
            nullable=False,
        ),
        sa.Column("options", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "correct_answer", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("points", sa.Float(), nullable=False),
        sa.Column("explanation", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("order_index", sa.Integer(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("quiz_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["quiz_id"], ["quiz_content.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_quiz_question_quiz_id"), "quiz_question", ["quiz_id"], unique=False
    )

    # COURSE ENROLLMENT
    op.create_table(
        "course_enrollment",
        sa.Column("enrollment_date", sa.DateTime(), nullable=False),
        sa.Column("completion_date", sa.DateTime(), nullable=True),
        sa.Column(
            "status",
            sa.Enum(
                "ACTIVE", "COMPLETED", "DROPPED", "SUSPENDED", name="enrollmentstatus"
            ),
            nullable=False,
        ),
        sa.Column("progress_percentage", sa.Float(), nullable=False),
        sa.Column("last_accessed", sa.DateTime(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("account_id", sa.Uuid(), nullable=False),
        sa.Column("course_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(["account_id"], ["account.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["course_id"], ["course.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("account_id", "course_id", name="ix_enroll_account_course"),
    )
    op.create_index(
        op.f("ix_course_enrollment_account_id"),
        "course_enrollment",
        ["account_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_course_enrollment_course_id"),
        "course_enrollment",
        ["course_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_course_enrollment_status"),
        "course_enrollment",
        ["status"],
        unique=False,
    )

    # COURSE PROGRESS
    op.create_table(
        "course_progress",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "NOT_STARTED",
                "IN_PROGRESS",
                "COMPLETED",
                "SKIPPED",
                name="moduleprogressstatus",
            ),
            nullable=False,
        ),
        sa.Column("start_time", sa.DateTime(), nullable=True),
        sa.Column("completion_time", sa.DateTime(), nullable=True),
        sa.Column("time_spent_seconds", sa.Integer(), nullable=False),
        sa.Column(
            "progress_data", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("current_streak", sa.Integer(), nullable=False),
        sa.Column("longest_streak", sa.Integer(), nullable=False),
        sa.Column("last_active_date", sa.DateTime(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("account_id", sa.Uuid(), nullable=False),
        sa.Column("course_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(["account_id"], ["account.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["course_id"], ["course.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "account_id", "course_id", name="ix_progress_account_course"
        ),
    )
    op.create_index(
        op.f("ix_course_progress_account_id"),
        "course_progress",
        ["account_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_course_progress_course_id"),
        "course_progress",
        ["course_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_course_progress_status"), "course_progress", ["status"], unique=False
    )

    # QUIZ ATTEMPT
    op.create_table(
        "quiz_attempt",
        sa.Column("attempt_number", sa.Integer(), nullable=False),
        sa.Column("start_time", sa.DateTime(), nullable=False),
        sa.Column("completion_time", sa.DateTime(), nullable=True),
        sa.Column("score", sa.Float(), nullable=True),
        sa.Column("answers", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "status",
            sa.Enum("IN_PROGRESS", "COMPLETED", "ABANDONED", name="quizattemptstatus"),
            nullable=False,
        ),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("account_id", sa.Uuid(), nullable=False),
        sa.Column("quiz_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(["account_id"], ["account.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["quiz_id"], ["quiz_content.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_quiz_attempt_account_id"), "quiz_attempt", ["account_id"], unique=False
    )
    op.create_index(
        op.f("ix_quiz_attempt_quiz_id"), "quiz_attempt", ["quiz_id"], unique=False
    )

    # CHAT
    op.create_table(
        "chat",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column(
            "chat_type", sa.Enum("DIRECT", "GROUP", name="chattype"), nullable=False
        ),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "avatar_url", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True
        ),
        sa.Column(
            "privacy",
            sa.Enum("PRIVATE", "PUBLIC", name="groupchatprivacy"),
            nullable=True,
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("max_members", sa.Integer(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("account_id", sa.Uuid(), nullable=True),
        sa.Column("course_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(["account_id"], ["account.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["course_id"], ["course.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_chat_account_id"), "chat", ["account_id"], unique=False)
    op.create_index(op.f("ix_chat_chat_type"), "chat", ["chat_type"], unique=False)
    op.create_index(op.f("ix_chat_privacy"), "chat", ["privacy"], unique=False)
    op.create_index("ix_privacy_active", "chat", ["privacy", "is_active"], unique=False)

    # CHAT MEMBER
    op.create_table(
        "chat_member",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column(
            "role",
            sa.Enum("ADMIN", "MODERATOR", "MEMBER", name="memberrole"),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.Enum("ACTIVE", "LEFT", "KICKED", "BANNED", name="memberstatus"),
            nullable=False,
        ),
        sa.Column("joined_at", sa.DateTime(), nullable=False),
        sa.Column("left_at", sa.DateTime(), nullable=True),
        sa.Column("notifications_enabled", sa.Boolean(), nullable=False),
        sa.Column("is_pinned", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("chat_id", sa.Uuid(), nullable=False),
        sa.Column("account_id", sa.Uuid(), nullable=False),
        # sa.Column("last_read_message_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(["account_id"], ["account.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["chat_id"], ["chat.id"], ondelete="CASCADE"),
        # sa.ForeignKeyConstraint(
        #     ["last_read_message_id"],
        #     ["message.id"],
        # ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("account_id", "chat_id", name="uix_account_chat"),
    )
    op.create_index(
        "ix_account_status", "chat_member", ["account_id", "status"], unique=False
    )
    op.create_index(
        op.f("ix_chat_member_account_id"), "chat_member", ["account_id"], unique=False
    )
    op.create_index(
        op.f("ix_chat_member_chat_id"), "chat_member", ["chat_id"], unique=False
    )
    op.create_index("ix_chat_role", "chat_member", ["chat_id", "role"], unique=False)

    # MESSAGE
    op.create_table(
        "message",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column(
            "message_type",
            sa.Enum(
                "TEXT", "IMAGE", "FILE", "COURSE_REFERNCE", "SYSTEM", name="messagetype"
            ),
            nullable=False,
        ),
        sa.Column("content", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "file_url", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True
        ),
        sa.Column(
            "file_name", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True
        ),
        sa.Column("file_size", sa.Integer(), nullable=True),
        sa.Column(
            "file_type", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True
        ),
        sa.Column("is_edited", sa.Boolean(), nullable=False),
        sa.Column("edited_at", sa.DateTime(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("extra_data", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("chat_id", sa.Uuid(), nullable=False),
        sa.Column("sender_id", sa.Uuid(), nullable=True),
        sa.Column("reply_to_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(["chat_id"], ["chat.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["reply_to_id"],
            ["message.id"],
        ),
        sa.ForeignKeyConstraint(["sender_id"], ["chat_member.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_chat_created_at", "message", ["chat_id", "created_at"], unique=False
    )
    op.create_index(op.f("ix_message_chat_id"), "message", ["chat_id"], unique=False)
    op.create_index(
        op.f("ix_message_message_type"), "message", ["message_type"], unique=False
    )
    op.create_index(
        op.f("ix_message_sender_id"), "message", ["sender_id"], unique=False
    )

    # MESSAGE REACTION
    op.create_table(
        "message_reaction",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("emoji", sqlmodel.sql.sqltypes.AutoString(length=10), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("message_id", sa.Uuid(), nullable=False),
        sa.Column("account_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["account_id"], ["account.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["message_id"],
            ["message.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("account_id", "message_id", name="uix_account_message"),
    )
    op.create_index(
        "ix_message_emoji", "message_reaction", ["message_id", "emoji"], unique=False
    )
    op.create_index(
        op.f("ix_message_reaction_account_id"),
        "message_reaction",
        ["account_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_message_reaction_message_id"),
        "message_reaction",
        ["message_id"],
        unique=False,
    )

    op.create_index(
        op.f("ix_profile_account_id"), "profile", ["account_id"], unique=True
    )

    # CHAT INVITE
    op.create_table(
        "chat_invite",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column(
            "invite_code", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True
        ),
        sa.Column("max_uses", sa.Integer(), nullable=True),
        sa.Column("current_uses", sa.Integer(), nullable=False),
        sa.Column("expires_at", sa.DateTime(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("chat_id", sa.Uuid(), nullable=False),
        sa.Column("invited_by_id", sa.Uuid(), nullable=False),
        sa.Column("invited_account_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["chat_id"],
            ["chat.id"],
        ),
        sa.ForeignKeyConstraint(
            ["invited_account_id"], ["account.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["invited_by_id"], ["chat_member.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_chat_invite_chat_id"), "chat_invite", ["chat_id"], unique=False
    )
    op.create_index(
        op.f("ix_chat_invite_invite_code"), "chat_invite", ["invite_code"], unique=True
    )

    # COMMENT
    op.create_table(
        "comment",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("message", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("likes", sa.Integer(), nullable=False),
        sa.Column("comment_count", sa.Integer(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("creator_id", sa.Uuid(), nullable=False),
        sa.Column("course_id", sa.Uuid(), nullable=False),
        sa.Column("reply_to_id", sa.Uuid(), nullable=True),
        sa.Column("mention_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(["course_id"], ["course.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["creator_id"], ["account.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["mention_id"], ["account.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["reply_to_id"],
            ["comment.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_comment_course_id"), "comment", ["course_id"], unique=False
    )
    op.create_index(
        op.f("ix_comment_creator_id"), "comment", ["creator_id"], unique=False
    )
    op.create_index(
        op.f("ix_comment_mention_id"), "comment", ["mention_id"], unique=False
    )

    # RATING
    op.create_table(
        "rating",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("star", sa.Integer(), nullable=False),
        sa.Column("message", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("account_id", sa.Uuid(), nullable=False),
        sa.Column("course_id", sa.Uuid(), nullable=True),
        sa.Column("comment_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(["account_id"], ["account.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["comment_id"], ["comment.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["course_id"], ["course.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("account_id", "course_id", name="uix_account_course"),
    )
    op.create_index(
        op.f("ix_rating_account_id"), "rating", ["account_id"], unique=False
    )
    op.create_index(op.f("ix_rating_course_id"), "rating", ["course_id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_quiz_question_quiz_id"), table_name="quiz_question")
    op.drop_table("quiz_question")
    op.drop_index(op.f("ix_quiz_attempt_quiz_id"), table_name="quiz_attempt")
    op.drop_index(op.f("ix_quiz_attempt_account_id"), table_name="quiz_attempt")
    op.drop_table("quiz_attempt")
    op.drop_index(
        op.f("ix_video_content_external_video_id"), table_name="video_content"
    )
    op.drop_table("video_content")
    op.drop_table("quiz_content")
    op.drop_index(
        op.f("ix_module_attachment_module_id"), table_name="module_attachment"
    )
    op.drop_index(
        op.f("ix_module_attachment_external_file_id"), table_name="module_attachment"
    )
    op.drop_table("module_attachment")
    op.drop_index(
        op.f("ix_document_content_external_file_id"), table_name="document_content"
    )
    op.drop_table("document_content")
    op.drop_index(op.f("ix_rating_course_id"), table_name="rating")
    op.drop_index(op.f("ix_rating_account_id"), table_name="rating")
    op.drop_table("rating")
    op.drop_index("ix_section_order", table_name="module")
    op.drop_index(op.f("ix_module_section_id"), table_name="module")
    op.drop_index(op.f("ix_module_order_index"), table_name="module")
    op.drop_index(op.f("ix_module_module_type"), table_name="module")
    op.drop_table("module")
    op.drop_index(op.f("ix_chat_invite_invite_code"), table_name="chat_invite")
    op.drop_index(op.f("ix_chat_invite_chat_id"), table_name="chat_invite")
    op.drop_table("chat_invite")
    op.drop_index(op.f("ix_section_order_index"), table_name="section")
    op.drop_index(op.f("ix_section_course_id"), table_name="section")
    op.drop_index("ix_course_order", table_name="section")
    op.drop_table("section")
    op.drop_index(op.f("ix_course_progress_status"), table_name="course_progress")
    op.drop_index(op.f("ix_course_progress_course_id"), table_name="course_progress")
    op.drop_index(op.f("ix_course_progress_account_id"), table_name="course_progress")
    op.drop_table("course_progress")
    op.drop_index(op.f("ix_course_enrollment_status"), table_name="course_enrollment")
    op.drop_index(
        op.f("ix_course_enrollment_course_id"), table_name="course_enrollment"
    )
    op.drop_index(
        op.f("ix_course_enrollment_account_id"), table_name="course_enrollment"
    )
    op.drop_table("course_enrollment")
    op.drop_index(op.f("ix_comment_mention_id"), table_name="comment")
    op.drop_index(op.f("ix_comment_creator_id"), table_name="comment")
    op.drop_index(op.f("ix_comment_course_id"), table_name="comment")
    op.drop_table("comment")
    op.drop_index("ix_privacy_active", table_name="chat")
    op.drop_index(op.f("ix_chat_privacy"), table_name="chat")
    op.drop_index(op.f("ix_chat_chat_type"), table_name="chat")
    op.drop_index(op.f("ix_chat_account_id"), table_name="chat")
    op.drop_table("chat")
    op.drop_index(op.f("ix_provider_account_id"), table_name="provider")
    op.drop_table("provider")
    op.drop_index(op.f("ix_profile_account_id"), table_name="profile")
    op.drop_table("profile")
    op.drop_index(op.f("ix_message_reaction_message_id"), table_name="message_reaction")
    op.drop_index(op.f("ix_message_reaction_account_id"), table_name="message_reaction")
    op.drop_index("ix_message_emoji", table_name="message_reaction")
    op.drop_table("message_reaction")
    op.drop_index("ix_search_filter", table_name="course")
    op.drop_index(op.f("ix_course_title"), table_name="course")
    op.drop_index(op.f("ix_course_status"), table_name="course")
    op.drop_index(op.f("ix_course_slug"), table_name="course")
    op.drop_index(op.f("ix_course_difficulty_level"), table_name="course")
    op.drop_table("course")
    op.drop_index(op.f("ix_message_sender_id"), table_name="message")
    op.drop_index(op.f("ix_message_message_type"), table_name="message")
    op.drop_index(op.f("ix_message_chat_id"), table_name="message")
    op.drop_index("ix_chat_created_at", table_name="message")
    op.drop_table("message")
    op.drop_index("ix_chat_role", table_name="chat_member")
    op.drop_index(op.f("ix_chat_member_chat_id"), table_name="chat_member")
    op.drop_index(op.f("ix_chat_member_account_id"), table_name="chat_member")
    op.drop_index("ix_account_status", table_name="chat_member")
    op.drop_table("chat_member")
    op.drop_index(op.f("ix_account_username"), table_name="account")
    op.drop_index(op.f("ix_account_email"), table_name="account")
    op.drop_table("account")
    # ### end Alembic commands ###
